CREATE DATABASE IF NOT EXISTS startersql;
USE startersql;
-- //UPDATIONN OPERATION
CREATE TABLE USERS (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    gender ENUM('Male', 'Female', 'Other'),
    date_of_birth DATE,
    salary DECIMAL(10, 2),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
DROP TABLE USERS;
INSERT INTO users (name, email, gender, date_of_birth, salary) VALUES
('Aarav', 'aarav@example.com', 'Male', '1995-05-14', 65000.00),
('Ananya', 'ananya@example.com', 'Female', '1990-11-23', 72000.00),
('Raj', 'raj@example.com', 'Male', '1988-02-17', 58000.00),
('Sneha', 'sneha@example.com', 'Female', '2000-08-09', 50000.00),
('Farhan', 'farhan@example.com', 'Male', '1993-12-30', 61000.00),
('Priyanka', 'priyanka@example.com', 'Female', '1985-07-12', 84000.00),
('Aisha', 'aisha@example.com', 'Female', '1997-03-25', 56000.00),
('Aditya', 'aditya@example.com', 'Male', '1992-06-17', 69000.00),
('Meera', 'meera@example.com', 'Female', '1989-09-05', 77000.00),
('Ishaan', 'ishaan@example.com', 'Male', '2001-10-02', 45000.00),
('Tanvi', 'tanvi@example.com', 'Female', '1994-04-18', 62000.00),
('Rohan', 'rohan@example.com', 'Male', '1986-12-01', 75000.00),
('Zoya', 'zoya@example.com', 'Female', '1998-01-15', 54000.00),
('Karan', 'karan@example.com', 'Male', '1990-08-22', 68000.00),
('Nikita', 'nikita@example.com', 'Female', '1987-03-10', 71000.00),
('Manav', 'manav@example.com', 'Male', '1996-11-29', 61000.00),
('Divya', 'divya@example.com', 'Female', '1991-02-28', 57000.00),
('Harshit', 'harshit@example.com', 'Male', '1993-09-09', 65000.00),
('Ritika', 'ritika@example.com', 'Female', '1999-05-05', 52000.00),
('Imran', 'imran@example.com', 'Male', '1995-07-30', 63000.00),
('Juhi', 'juhi@example.com', 'Female', '1992-10-14', 59000.00),
('Tushar', 'tushar@example.com', 'Male', '1990-01-08', 73000.00),
('Lata', 'lata@example.com', 'Female', '1984-11-11', 78000.00),
('Yash', 'yash@example.com', 'Male', '1997-06-06', 64000.00),
('Fatima', 'fatima@example.com', 'Female', '1993-03-03', 55000.00);
select * from users;
-- BASIC QUES
SELECT COUNT(*) FROM USERS;
SELECT COUNT(*) AS MALE_GENDERS FROM USERS WHERE GENDER = 'MALE';
SELECT MAX(SALARY) AS MAX_SALARY FROM USERS;
SELECT MIN(SALARY) AS MIN_SALARY FROM USERS;
SELECT AVG(SALARY) AS AVG_SALARY FROM USERS;
SELECT SUM(SALARY) AS TOTAL_SALARY FROM USERS;

-- INTERMEDIATE QUES
SELECT GENDER, AVG(SALARY) AS AVG_SALARY_BY_GENDER FROM USERS GROUP BY GENDER;
SELECT GENDER, COUNT(*) AS TOTAL_NO_OF_USERS_IN_GENDER FROM USERS GROUP BY GENDER;
SELECT GENDER, MAX(SALARY) AS MAXIMUM_SALARY_IN_GENDER FROM USERS GROUP BY GENDER;
SELECT GENDER, MIN(SALARY) AS MINIMUM_SALARY_IN_GENDER FROM USERS GROUP BY GENDER;
SELECT GENDER, SUM(SALARY) AS TOTAL_SALARY_IN_GENDER FROM USERS GROUP BY GENDER;

-- TOUGH QUES
SELECT GENDER, AVG(SALARY) AS AVG_SALARY_ABVV_60000 FROM USERS GROUP BY GENDER HAVING AVG(SALARY > 60000) ORDER BY AVG_SALARY_ABVV_60000 DESC;
SELECT GENDER, SUM(SALARY) AS TOTAL_SALARY FROM USERS GROUP BY GENDER ORDER BY TOTAL_SALARY DESC;
-- SELECT YEAR(date_of_birth) AS BIRTH_YEAR, COUNT(*) AS TOTAL_USERS GROUP BY YEAR(date_of_birth) ORDER BY BORN_YEAR ASC; doubtful and idk 
SHOW COLUMNS FROM users;
SELECT CONCAT(FLOOR(YEAR(date_of_birth) / 10) * 10, 's') AS decade,COUNT(*) AS total_users FROM users GROUP BY decade ORDER BY decade ASC;
SELECT GENDER, COUNT(*) AS GENDER_USERS_MORETHEN_5 FROM USERS GROUP BY GENDER HAVING COUNT(*) > 5 ORDER BY GENDER_USERS_MORETHEN_5 DESC;
SELECT GENDER, AVG(SALARY) AS EACH_USER_AVG_SALARY FROM USERS GROUP BY GENDER  ORDER BY EACH_USER_AVG_SALARY DESC;

SELECT UPPER(NAME) AS CAPITALNAME FROM USERS;
SELECT LOWER(EMAIL) AS LOWEREMAIL FROM USERS;
SELECT NAME, LENGTH(NAME) AS NAMELENGTH FROM USERS;
SELECT NAME, ROUND(SALARY) AS SALARY FROM USERS;
SELECT CONCAT(NAME, '-', GENDER) AS COMBINED FROM USERS;
SELECT YEAR(DATE_OF_BIRTH) AS YEARBIRTH FROM USERS;
SELECT MONTHNAME(DATE_OF_BIRTH) AS MONTHBIRTH FROM USERS;
SELECT NAME, YEAR(CURDATE()) - YEAR(DATE_OF_BIRTH) AS ROUGHDATEE FROM USERS;
SELECT NAME, DATE_OF_BIRTH, TIMESTAMPDIFF(YEAR, DATE_OF_BIRTH, CURDATE())AS AGE FROM USERS ORDER BY AGE DESC;

-- CONDITIONAL AND MATH FUNCTION PRACTICE
-- EASY
SELECT NAME, SALARY, MOD(SALARY, 100000) AS REMAINDERSALRY FROM USERS;
SELECT NAME, SALARY, ROUND(SALARY, -3)AS ROUNDEDSALARY FROM USERS;
SELECT NAME, CEIL(SALARY) AS CEILSALARY FROM USERS;
SELECT NAME, FLOOR(SALARY) AS FLOORSALARY FROM USERS;
SELECT * FROM USERS;
-- INTERMEDIATE
SELECT NAME, SALARY, IF(SALARY > 70000, "HIGHER SALARY", "AVERAGE EARNER") FROM USERS;
SELECT NAME, SALARY, CASE WHEN SALARY < 55000 THEN "LOW"  WHEN SALARY BETWEEN 55000 AND 70000 THEN "MEDIUM"  WHEN SALARY > 70000 THEN "HIGH" END AS SALARYRATIO FROM USERS;
SELECT name, salary FROM users WHERE MOD(ROUND(salary), 2) = 0;
SELECT NAME, SALARY, ABS(SALARY - 65000) AS ABSDIFFSLARY FROM USERS;
SELECT GENDER, AVG(SALARY) AS AVG_SALARY, CASE WHEN AVG(SALARY) < 55000 THEN "LOW" WHEN AVG(SALARY) BETWEEN 55000 AND 70000 THEN "MEDIUM" WHEN AVG(SALARY) > 70000 THEN "HIGH" END AS NEW FROM USERS GROUP BY GENDER;
SELECT AVG(SALARY) AS AVG_SALARY, CASE WHEN AVG(SALARY) < 55000 THEN "LOW" WHEN AVG(SALARY) BETWEEN 55000 AND 70000 THEN "MEDIUM" WHEN AVG(SALARY) > 70000 THEN "HIGH" END AS NEW FROM USERS;
SELECT NAME, DATE_OF_BIRTH, IF(YEAR(DATE_OF_BIRTH) > 1990, "MILENNAL", "GENX") AS CATEGORY FROM USERS;
SELECT NAME, DATE_OF_BIRTH, CASE WHEN YEAR(DATE_OF_BIRTH) BETWEEN 1980 AND 1989 THEN "1980S" WHEN YEAR(DATE_OF_BIRTH) BETWEEN 1990 AND 1999 THEN "1990S" WHEN YEAR(DATE_OF_BIRTH) BETWEEN 2000 AND 2009 THEN "2000S" ELSE "OTHER" END AS BIRTHDECADE FROM USERS ORDER BY BIRTHDECADE;

